import React, { useEffect, useRef, useState } from 'react';

const Ball: React.FC = () => {
  // The six path definitions.
  const paths = [
    "M234.97756958007812,0C228.55006663004556,12.556053161621094,219.7309366861979,61.733927408854164,196.4125518798828,75.33631896972656C173.09416707356772,88.93871053059895,118.83407656351726,71.15097045898438,95.0672607421875,81.61434936523438C71.30044492085774,92.07772827148438,69.65620040893555,126.30792236328125,53.8116569519043,138.11659240722656C37.96711349487305,149.92526245117188,8.968609491984049,150.07474009195963,0,152.46636962890625",
    "M0,200C9.715993881225586,204.93273417154947,48.43049303690592,214.79820251464844,58.295963287353516,229.59640502929688C68.1614335378011,244.3946075439453,46.33781369527181,274.73839314778644,59.19282150268555,288.7892150878906C72.04782931009929,302.8400370279948,121.3751875559489,300.1494649251302,135.42601013183594,313.9013366699219C149.476832707723,327.65320841471356,135.5754852294922,359.34230041503906,143.4977569580078,371.3004455566406C151.42002868652344,383.2585906982422,173.8415552775065,381.0164286295573,182.9596405029297,385.65020751953125C192.07772572835287,390.2839864095052,195.665163675944,396.8609670003255,198.20626831054688,399.1031188964844",
    "M247.53363037109375,1.7937219142913818C248.13153584798178,13.452914675076803,243.94617716471353,49.925260821978256,251.12106323242188,71.7488784790039C258.2959493001302,93.57249613602956,275.3363087972005,109.2675666809082,290.58294677734375,132.7354278564453C305.829584757487,156.20328903198242,340.2092590332031,186.54708099365234,342.60089111328125,212.55604553222656C344.9925231933594,238.56501007080078,321.6741434733073,268.75932057698566,304.9327392578125,288.7892150878906C288.1913350423177,308.8191095987956,255.90433502197266,318.5351104736328,242.1524658203125,332.73541259765625C228.40059661865234,346.9357147216797,225.71001434326172,362.92974344889325,222.42152404785156,373.99102783203125C219.1330337524414,385.05231221516925,222.42152404785156,394.9177703857422,222.42152404785156,399.1031188964844",
    "M341.70404052734375,3.5874438285827637C347.23468017578125,15.396113316218058,359.19281514485675,52.91479674975078,374.88787841796875,74.43946075439453C390.58294169108075,95.96412475903828,417.93719991048175,117.3393160502116,435.8744201660156,132.7354278564453C453.8116404215495,148.13153966267905,470.8520050048828,153.06426493326822,482.5111999511719,166.81613159179688C494.17039489746094,180.56799825032553,505.82958984375,201.19580586751303,505.82958984375,215.2466278076172C505.82958984375,229.29744974772134,497.3094075520833,240.80716196695963,482.5111999511719,251.12106323242188C467.71299235026044,261.4349644978841,432.43645731608075,264.12554931640625,417.04034423828125,277.1300354003906C401.64423116048175,290.134521484375,390.8819071451823,312.55605061848956,390.134521484375,329.1479797363281C389.3871358235677,345.7399088541667,403.28846740722656,366.0687561035156,412.5560302734375,376.6816101074219C421.82359313964844,387.2944641113281,435.2765197753906,389.23766072591144,445.7398986816406,392.8251037597656C456.2032775878906,396.4125467936198,470.403569539388,397.3094075520833,475.3363037109375,398.2062683105469",
    "M576.6815795898438,399.1031188964844C580.1195475260416,390.58294169108075,583.1090901692709,360.6875864664714,597.3093872070312,347.9820556640625C611.5096842447916,335.2765248616536,641.5545145670573,328.84900919596356,661.8833618164062,322.86993408203125C682.2122090657552,316.89085896809894,704.4842631022135,323.318364461263,719.282470703125,312.10760498046875C734.0806783040365,300.8968454996745,742.3019002278646,271.8983510335286,750.672607421875,255.60537719726562C759.0433146158854,239.3124033610026,761.7339172363281,223.01941935221353,769.5067138671875,214.34976196289062C777.2795104980469,205.68010457356772,792.6756083170573,205.38115437825522,797.3093872070312,203.58743286132812",
    "M517.48876953125,0C519.1330159505209,5.6801191965738935,520.4783121744791,23.766813913981117,527.354248046875,34.08071517944336C534.2301839192709,44.3946164449056,542.8998413085938,55.45590400695801,558.744384765625,61.88340759277344C574.5889282226562,68.31091117858887,601.0463256835938,68.01195526123047,622.4215087890625,72.64573669433594C643.7966918945312,77.2795181274414,672.7951863606771,80.41853332519531,686.9954833984375,89.68609619140625C701.1957804361979,98.95365905761719,697.3093872070312,117.78773498535156,707.623291015625,128.25111389160156C717.9371948242188,138.71449279785156,733.781748453776,148.13154093424478,748.87890625,152.46636962890625C763.976064046224,156.80119832356772,789.9850158691406,153.9611333211263,798.2062377929688,154.2600860595703"
  ];

  // Helper: Choose a new path ensuring it's different from the current one.
  const getNewPath = (prevPath: string, otherPath?: string): string => {
    let newPath = paths[Math.floor(Math.random() * paths.length)];
    while (paths.length > 1 && (newPath === prevPath || newPath === otherPath)) {
      newPath = paths[Math.floor(Math.random() * paths.length)];
    }
    return newPath;
  };

  // currentPath holds the path the triangles will animate along.
  const [currentPath1, setCurrentPath1] = useState<string>(
    () => paths[Math.floor(Math.random() * paths.length)]
  );
  const [currentPath2, setCurrentPath2] = useState<string>(
    () => getNewPath(currentPath1)
  );
  
  // ballVisible controls whether the triangles are rendered.
  const [ball1Visible, setBall1Visible] = useState<boolean>(true);
  const [ball2Visible, setBall2Visible] = useState<boolean>(true);

  // Create refs for the animateMotion elements.
  const motion1Ref = useRef<SVGAnimateMotionElement>(null);
  const motion2Ref = useRef<SVGAnimateMotionElement>(null);

  // When paths or visibility changes, trigger the animations.
  useEffect(() => {
    if (ball1Visible && motion1Ref.current) {
      motion1Ref.current.beginElement();
    }
  }, [currentPath1, ball1Visible]);

  useEffect(() => {
    if (ball2Visible && motion2Ref.current) {
      motion2Ref.current.beginElement();
    }
  }, [currentPath2, ball2Visible]);

  useEffect(() => {
    // Every time a new path is chosen, show the triangles.
    setBall1Visible(true);
    setBall2Visible(true);
    const animationDuration = 5000; // Triangles move along the path for 5 seconds.

    // After 5 seconds, hide the triangles.
    const hideTimer1 = setTimeout(() => {
      setBall1Visible(false);
    }, animationDuration);

    const hideTimer2 = setTimeout(() => {
      setBall2Visible(false);
    }, animationDuration);

    // After the animation plus a random delay (0-3 seconds), choose new paths.
    const randomDelay1 = 1000 + Math.random() * 2000;
    const randomDelay2 = 1000 + Math.random() * 2000;
    
    const newPathTimer1 = setTimeout(() => {
      setCurrentPath1((prev) => getNewPath(prev, currentPath2));
    }, animationDuration + randomDelay1);

    const newPathTimer2 = setTimeout(() => {
      setCurrentPath2((prev) => getNewPath(prev, currentPath1));
    }, animationDuration + randomDelay2);

    return () => {
      clearTimeout(hideTimer1);
      clearTimeout(hideTimer2);
      clearTimeout(newPathTimer1);
      clearTimeout(newPathTimer2);
    };
  }, [currentPath1, currentPath2]);

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 750 400"
      style={{
        position: 'absolute',
        top: 0,
        left: -20,
        width: '100%',
        height: '100%',
        pointerEvents: 'none'
      }}
    >
      {ball1Visible && (
        <g key={currentPath1} transform="rotate(90)">
          <polygon
            points="0,-5 -5,5 5,5"
            fill="#404040"
            opacity="0.5"
          />
          <animateMotion
            ref={motion1Ref}
            begin="indefinite"
            dur="5s"
            fill="freeze"
            rotate="auto"
            path={currentPath1}
            restart="always"
          />
        </g>
      )}
      {ball2Visible && (
        <g key={currentPath2} transform="rotate(90)">
          <polygon
            points="0,-5 -5,5 5,5"
            fill="#404040"
            opacity="0.5"
          />
          <animateMotion
            ref={motion2Ref}
            begin="indefinite"
            dur="5s"
            fill="freeze"
            rotate="auto"
            path={currentPath2}
            restart="always"
          />
        </g>
      )}
    </svg>
  );
};

export default Ball;